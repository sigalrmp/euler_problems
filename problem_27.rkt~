#lang racket

(define (prime?-h n m)
  (if (> m (/ n 2))
      #t
      (if (= (modulo n m) 0)
          #f
          (prime?-h n (+ m 1)))))

(define (prime? n)
  (prime?-h n 2))

(define (prime-count-h a b x)
  (define next (+ (expt x 2) (* a x) b))
  (if (prime? next)
      (+ 1 (prime-count-h a b (+ x 1)))
      0))

(define (prime-count ab)
  (prime-count-h (car ab) (cdr ab) 0))

(define (max-prime-count ab1 ab2)
  (if (> (prime-count ab1) (prime-count ab2))
      ab1
      ab2))

(define (foo a)
  (define (bar b)
    (define ab (cons a b))
    (if (> b 1000)
        ab
        (max-prime-count ab (bar (+ b 1)))))
  (if (>= a 1000)
      (bar -1000)
      (max-prime-count (bar -1000) (foo (+ a 1)))))
        

(define (answer)
  (foo -999))